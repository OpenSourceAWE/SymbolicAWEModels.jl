#!/bin/bash -eu
# SPDX-FileCopyrightText: 2025 Uwe Fechner
# SPDX-License-Identifier: MIT

if [[ $(basename $(pwd)) == "bin" ]]; then
    cd ..
fi

julia_version=$(julia --version | awk '{print($3)}')
julia_major=${julia_version:0:3}
if [[ $julia_major == "1.1" ]]; then
    julia_major=${julia_version:0:4} 
fi
if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1 ; then
    branch=$(git rev-parse --abbrev-ref HEAD | sed 's/\//-/g')
else
    branch=""
fi
if [[ $branch != "" ]]; then
    SOFILE="bin/kps-image-${julia_major}-${branch}.so"
else
    SOFILE="bin/kps-image-${julia_major}.so"
fi

echo "Creating xz file for prob_dynamic_v${julia_major}_3_seg.bin.default.xz ..."
if [[ $julia_major == "1.10" ]]; then
    rm -f data/model_1.10_ram_dynamic_3_seg.bin.default
    rm -f data/model_1.10_ram_dynamic_3_seg.bin.default.xz
    echo "using SymbolicAWEModels. Please ignore the error message about the missing input file!"
    printf ' ' >> src/precompile.jl
    julia --project -J $SOFILE -e 'using SymbolicAWEModels; include("test/create_xz_file.jl")'
    cp data/model_1.10_ram_dynamic_3_seg.bin data/model_1.10_ram_dynamic_3_seg.bin.default
    xz data/model_1.10_ram_dynamic_3_seg.bin.default
else
    rm -f data/model_1.11_ram_dynamic_3_seg.bin.default
    rm -f data/model_1.11_ram_dynamic_3_seg.bin.default.xz
    echo "using SymbolicAWEModels. Please ignore the error message about the missing input file!"
    printf ' ' >> src/precompile.jl
    julia --project -J $SOFILE -e 'using SymbolicAWEModels; include("test/create_xz_file.jl")'
    cp data/model_1.11_ram_dynamic_3_seg.bin data/model_1.11_ram_dynamic_3_seg.bin.default
    xz data/model_1.11_ram_dynamic_3_seg.bin.default
fi

echo "using SymbolicAWEModels..."
truncate -s -1 src/precompile.jl
julia --project -J $SOFILE -e 'using SymbolicAWEModels'
echo "Done creating prob_dynamic_v${julia_major}_3_seg.bin.default.xz !"
