name: CI
on:
  push:
    branches:
      - main
    tags: '*'
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  reuse-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run REUSE lint
        run: |
          docker run --rm --volume ${{ github.workspace }}:/data fsfe/reuse lint

  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1'
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        arch:
          - x64
        include:
          - os: macOS-latest
            arch: aarch64
            version: 1
    steps:
      - name: Install matplotlib
        run: if [ "$RUNNER_OS" = "Linux" ]; then sudo apt-get install -y python3-matplotlib; fi
        shell: bash

      - uses: actions/checkout@v4

      - name: Use default manifest
        run: |
          if [ -f Manifest.toml.default ]; then cp Manifest.toml.default Manifest.toml; fi
        shell: bash

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1

      - name: Build PyCall
        run: julia --project -e 'ENV["PYTHON"]=""; using Pkg; Pkg.instantiate(); Pkg.add("PyCall"); Pkg.build("PyCall")'
        shell: bash

      - uses: julia-actions/julia-runtest@v1

  test-with-code-coverage:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - with code coverage
    runs-on: ${{ matrix.os }}
    timeout-minutes: 70
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1'
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        arch:
          - x64
    steps:
      - name: Install matplotlib
        run: if [ "$RUNNER_OS" = "Linux" ]; then sudo apt-get install -y python3-matplotlib; fi
        shell: bash

      - uses: actions/checkout@v4

      - name: Use default manifest
        run: |
          if [ -f Manifest.toml.default ]; then cp Manifest.toml.default Manifest.toml; fi
        shell: bash

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1

      - name: Build PyCall
        run: julia --project -e 'ENV["PYTHON"]=""; using Pkg; Pkg.instantiate(); Pkg.add("PyCall"); Pkg.build("PyCall")'
        shell: bash

      - uses: julia-actions/julia-runtest@v1

      - uses: julia-actions/julia-processcoverage@v1

      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
        continue-on-error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Install matplotlib
        run: sudo apt-get install -y python3-matplotlib
        shell: bash
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - run: |
          julia --project=docs -e '
            using Documenter: DocMeta, doctest
            using KiteUtils
            DocMeta.setdocmeta!(KiteUtils, :DocTestSetup, :(using KiteUtils); recursive=true)
            doctest(KiteUtils)'
